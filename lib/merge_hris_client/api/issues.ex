# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule MergeHRISClient.Api.Issues do
  @moduledoc """
  API calls for all endpoints tagged `Issues`.
  """

  alias MergeHRISClient.Connection
  import MergeHRISClient.RequestBuilder


  @doc """
  Gets issues.

  ## Parameters

  - connection (MergeHRISClient.Connection): Connection to server
  - authorization (String.t): Should include 'Bearer ' followed by your test/production API Key.
  - opts (KeywordList): [optional] Optional parameters
    - :account_token (String.t):
    - :cursor (String.t): The pagination cursor value.
    - :end_date (String.t): If included, will only include issues whose most recent action occurred before this time
    - :end_user_organization_name (String.t):
    - :first_incident_time_after (DateTime.t): If provided, will only return issues whose first incident time was after this datetime.
    - :first_incident_time_before (DateTime.t): If provided, will only return issues whose first incident time was before this datetime.
    - :include_muted (String.t): If True, will include muted issues
    - :integration_name (String.t):
    - :last_incident_time_after (DateTime.t): If provided, will only return issues whose first incident time was after this datetime.
    - :last_incident_time_before (DateTime.t): If provided, will only return issues whose first incident time was before this datetime.
    - :page_size (integer()): Number of results to return per page.
    - :start_date (String.t): If included, will only include issues whose most recent action occurred after this time
    - :status (String.t):
  ## Returns

  {:ok, MergeHRISClient.Model.PaginatedIssueList.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec issues_list(Tesla.Env.client, String.t, keyword()) :: {:ok, MergeHRISClient.Model.PaginatedIssueList.t} | {:error, Tesla.Env.t}
  def issues_list(connection, authorization, opts \\ []) do
    optional_params = %{
      :"account_token" => :query,
      :"cursor" => :query,
      :"end_date" => :query,
      :"end_user_organization_name" => :query,
      :"first_incident_time_after" => :query,
      :"first_incident_time_before" => :query,
      :"include_muted" => :query,
      :"integration_name" => :query,
      :"last_incident_time_after" => :query,
      :"last_incident_time_before" => :query,
      :"page_size" => :query,
      :"start_date" => :query,
      :"status" => :query
    }
    %{}
    |> method(:get)
    |> url("/issues")
    |> add_param(:headers, :"Authorization", authorization)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %MergeHRISClient.Model.PaginatedIssueList{}}
    ])
  end

  @doc """
  Get a specific issue.

  ## Parameters

  - connection (MergeHRISClient.Connection): Connection to server
  - authorization (String.t): Should include 'Bearer ' followed by your test/production API Key.
  - id (String.t):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, MergeHRISClient.Model.Issue.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec issues_retrieve(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MergeHRISClient.Model.Issue.t} | {:error, Tesla.Env.t}
  def issues_retrieve(connection, authorization, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/issues/#{id}")
    |> add_param(:headers, :"Authorization", authorization)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %MergeHRISClient.Model.Issue{}}
    ])
  end
end
